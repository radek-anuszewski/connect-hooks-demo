{"version":3,"sources":["features/counter/counterSlice.js","features/counter/Counter.js","features/counter/CounterHooksContainer.js","features/counter/CounterConnectContainer.js","App.js","app/store.js","index.js","features/counter/Counter.module.css"],"names":["counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","incrementAsync","amount","dispatch","setTimeout","Counter","count","useState","incrementAmount","setIncrementAmount","className","styles","row","button","aria-label","onClick","textbox","onChange","e","target","Number","asyncButton","CounterHooksContainer","useSelector","counter","useDispatch","mapDispatchToProps","connect","props","App","configureStore","reducer","counterReducer","ReactDOM","render","StrictMode","store","document","getElementById","module","exports"],"mappings":"0OAEaA,EAAeC,YAAY,CACtCC,KAAM,UACNC,aAAc,CACZC,MAAO,GAETC,SAAU,CACRC,UAAW,SAAAC,GAKTA,EAAMH,OAAS,GAEjBI,UAAW,SAAAD,GACTA,EAAMH,OAAS,GAEjBK,kBAAmB,SAACF,EAAOG,GACzBH,EAAMH,OAASM,EAAOC,Y,EAK+BX,EAAaY,QAAzDN,E,EAAAA,UAAWE,E,EAAAA,UAAWC,E,EAAAA,kBAMxBI,EAAiB,SAAAC,GAAM,OAAI,SAAAC,GACtCC,YAAW,WACTD,EAASN,EAAkBK,MAC1B,OAQUd,IAAf,Q,+BCtCO,SAASiB,EAAT,GAAoF,IAAlEC,EAAiE,EAAjEA,MAAOZ,EAA0D,EAA1DA,UAAWE,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,kBAAmBI,EAAiB,EAAjBA,eAAiB,EAC1CM,mBAAS,KADiC,mBACjFC,EADiF,KAChEC,EADgE,KAGxF,OACE,gCACE,sBAAKC,UAAWC,IAAOC,IAAvB,UACE,wBACEF,UAAWC,IAAOE,OAClBC,aAAW,kBACXC,QAASrB,EAHX,eAOA,sBAAMgB,UAAWC,IAAOnB,MAAxB,SAAgCc,IAChC,wBACEI,UAAWC,IAAOE,OAClBC,aAAW,kBACXC,QAASnB,EAHX,kBAQF,sBAAKc,UAAWC,IAAOC,IAAvB,UACE,uBACEF,UAAWC,IAAOK,QAClBF,aAAW,uBACXtB,MAAOgB,EACPS,SAAU,SAAAC,GAAC,OAAIT,EAAmBS,EAAEC,OAAO3B,UAE7C,wBACEkB,UAAWC,IAAOE,OAClBE,QAAS,kBACPlB,EAAkBuB,OAAOZ,IAAoB,IAHjD,wBAQA,wBACEE,UAAWC,IAAOU,YAClBN,QAAS,kBAAMd,EAAemB,OAAOZ,IAAoB,IAF3D,6BC9BR,IAaec,EAbe,WAC5B,IAAMhB,EAAQiB,aAAY,SAAA5B,GAAK,OAAIA,EAAM6B,QAAQhC,SAC3CW,EAAWsB,cAEjB,OAAO,cAACpB,EAAD,CACLC,MAAOA,EACPV,UAAW,kBAAMO,EAASP,MAC1BF,UAAW,kBAAMS,EAAST,MAC1BO,eAAgB,SAAAT,GAAK,OAAIW,EAASF,EAAeT,KACjDK,kBAAmB,SAAAL,GAAK,OAAIW,EAASN,EAAkBL,Q,gBCDrDkC,EAAqB,CACzB9B,YACAF,YACAG,oBACAI,kBAGa0B,eAXS,SAAAhC,GAAK,MAAK,CAChCW,MAAOX,EAAM6B,QAAQhC,SAUiBkC,EAAzBC,EAfiB,SAAAC,GAC9B,OAAO,cAACvB,EAAD,eAAauB,OCQPC,MAbf,WACE,OACE,qBAAKnB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,iDACA,cAAC,EAAD,IACA,+CACA,cAAC,EAAD,UCVOoB,cAAe,CAC5BC,QAAS,CACPP,QAASQ,KCEbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,U,kBCZ1BC,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,sD","file":"static/js/main.aa0febbd.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport styles from './Counter.module.css';\r\n\r\nexport function Counter({count, increment, decrement, incrementByAmount, incrementAsync}) {\r\n  const [incrementAmount, setIncrementAmount] = useState('2');\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.row}>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Increment value\"\r\n          onClick={increment}\r\n        >\r\n          +\r\n        </button>\r\n        <span className={styles.value}>{count}</span>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Decrement value\"\r\n          onClick={decrement}\r\n        >\r\n          -\r\n        </button>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <input\r\n          className={styles.textbox}\r\n          aria-label=\"Set increment amount\"\r\n          value={incrementAmount}\r\n          onChange={e => setIncrementAmount(e.target.value)}\r\n        />\r\n        <button\r\n          className={styles.button}\r\n          onClick={() =>\r\n            incrementByAmount(Number(incrementAmount) || 0)\r\n          }\r\n        >\r\n          Add Amount\r\n        </button>\r\n        <button\r\n          className={styles.asyncButton}\r\n          onClick={() => incrementAsync(Number(incrementAmount) || 0)}\r\n        >\r\n          Add Async\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  decrement,\r\n  increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n} from './counterSlice';\r\nimport {Counter} from \"./Counter\";\r\n\r\nconst CounterHooksContainer = () => {\r\n  const count = useSelector(state => state.counter.value);\r\n  const dispatch = useDispatch();\r\n\r\n  return <Counter\r\n    count={count}\r\n    decrement={() => dispatch(decrement())}\r\n    increment={() => dispatch(increment())}\r\n    incrementAsync={value => dispatch(incrementAsync(value))}\r\n    incrementByAmount={value => dispatch(incrementByAmount(value))}\r\n  />\r\n};\r\n\r\nexport default CounterHooksContainer;\r\n","import React from \"react\";\r\nimport {\r\n  decrement,\r\n  increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n} from './counterSlice';\r\nimport {Counter} from \"./Counter\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst CounterConnectContainer = props => {\r\n  return <Counter {...props} />\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  count: state.counter.value,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  decrement,\r\n  increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CounterConnectContainer);\r\n","\r\nimport React from 'react';\r\nimport CounterHooksContainer from './features/counter/CounterHooksContainer';\r\nimport './App.css';\r\nimport CounterConnectContainer from \"./features/counter/CounterConnectContainer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h2>Connect version</h2>\r\n        <CounterHooksContainer />\r\n        <h2>Hooks version</h2>\r\n        <CounterConnectContainer />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__16nge\",\"value\":\"Counter_value__2gG4i\",\"button\":\"Counter_button__1vOda\",\"textbox\":\"Counter_textbox__O6r7r\",\"asyncButton\":\"Counter_asyncButton__1acvS Counter_button__1vOda\"};"],"sourceRoot":""}